2022-06-05/09:56:46		Entered the get_data method of the Data_Getter class
2022-06-05/09:56:46		Data Load Successful.Exited the get_data method of the Data_Getter class
2022-06-05/09:56:46		Entered the separate_label_feature method of the Preprocessor class
2022-06-05/09:56:46		Label Separation Successful. Exited the separate_label_feature method of the Preprocessor class
2022-06-05/10:05:02		Entered the get_data method of the Data_Getter class
2022-06-05/10:05:02		Data Load Successful.Exited the get_data method of the Data_Getter class
2022-06-05/10:05:02		Entered the separate_label_feature method of the Preprocessor class
2022-06-05/10:05:02		Label Separation Successful. Exited the separate_label_feature method of the Preprocessor class
2022-06-05/10:06:19		Entered the get_data method of the Data_Getter class
2022-06-05/10:06:19		Data Load Successful.Exited the get_data method of the Data_Getter class
2022-06-05/10:06:19		Entered the separate_label_feature method of the Preprocessor class
2022-06-05/10:06:19		Label Separation Successful. Exited the separate_label_feature method of the Preprocessor class
2022-06-05/10:10:35		Entered the get_data method of the Data_Getter class
2022-06-05/10:10:35		Data Load Successful.Exited the get_data method of the Data_Getter class
2022-06-05/10:10:35		Entered the separate_label_feature method of the Preprocessor class
2022-06-05/10:10:35		Label Separation Successful. Exited the separate_label_feature method of the Preprocessor class
2022-06-05/10:16:36		Entered the get_data method of the Data_Getter class
2022-06-05/10:16:36		Data Load Successful.Exited the get_data method of the Data_Getter class
2022-06-05/10:16:37		Entered the separate_label_feature method of the Preprocessor class
2022-06-05/10:16:37		Label Separation Successful. Exited the separate_label_feature method of the Preprocessor class
2022-06-05/10:25:29		Entered the get_data method of the Data_Getter class
2022-06-05/10:25:29		Data Load Successful.Exited the get_data method of the Data_Getter class
2022-06-05/10:25:29		Entered the separate_label_feature method of the Preprocessor class
2022-06-05/10:25:29		Label Separation Successful. Exited the separate_label_feature method of the Preprocessor class
2022-06-05/10:25:33		Entered the separate_label_feature method of the Preprocessor class
2022-06-05/10:25:33		Label Separation Successful. Exited the separate_label_feature method of the Preprocessor class
2022-06-05/10:51:38		Entered the get_data method of the Data_Getter class
2022-06-05/10:51:38		Data Load Successful.Exited the get_data method of the Data_Getter class
2022-06-05/10:51:38		Entered the separate_label_feature method of the Preprocessor class
2022-06-05/10:51:38		Label Separation Successful. Exited the separate_label_feature method of the Preprocessor class
2022-06-05/10:51:41		Entered the separate_label_feature method of the Preprocessor class
2022-06-05/10:51:41		Label Separation Successful. Exited the separate_label_feature method of the Preprocessor class
2022-06-05/11:02:02		Entered the get_data method of the Data_Getter class
2022-06-05/11:02:02		Data Load Successful.Exited the get_data method of the Data_Getter class
2022-06-05/11:02:02		Entered the separate_label_feature method of the Preprocessor class
2022-06-05/11:02:02		Label Separation Successful. Exited the separate_label_feature method of the Preprocessor class
2022-06-05/11:02:05		Testing objects loaded {'0': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=3, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=5, min_weight_fraction_leaf=0.0,
                      n_estimators=50, n_jobs=None, oob_score=False,
                      random_state=None, verbose=0, warm_start=False), 'KMeans': KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300,
       n_clusters=4, n_init=10, n_jobs=None, precompute_distances='auto',
       random_state=42, tol=0.0001, verbose=0), '1': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=nan, n_estimators=50,
             n_jobs=1, nthread=None, objective='reg:linear', random_state=0,
             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,
             silent=None, subsample=1, verbosity=1), '2': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=nan, n_estimators=200,
             n_jobs=1, nthread=None, objective='reg:linear', random_state=0,
             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,
             silent=None, subsample=1, verbosity=1), 'StandardScaler': StandardScaler(copy=True, with_mean=True, with_std=True), '3': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=nan, n_estimators=100,
             n_jobs=1, nthread=None, objective='reg:linear', random_state=0,
             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,
             silent=None, subsample=1, verbosity=1)}
2022-06-05/11:02:05		Entered the separate_label_feature method of the Preprocessor class
2022-06-05/11:02:05		Label Separation Successful. Exited the separate_label_feature method of the Preprocessor class
2022-06-05/11:02:24		Production objects loaded {'0': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=None, oob_score=False,
                      random_state=None, verbose=0, warm_start=False), 'KMeans': KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300,
       n_clusters=3, n_init=10, n_jobs=None, precompute_distances='auto',
       random_state=42, tol=0.0001, verbose=0), '1': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=None, oob_score=False,
                      random_state=None, verbose=0, warm_start=False), '2': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=nan, n_estimators=100,
             n_jobs=1, nthread=None, objective='reg:linear', random_state=0,
             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,
             silent=None, subsample=1, verbosity=1), 'StandardScaler': StandardScaler(copy=True, with_mean=True, with_std=True)}
2022-06-05/11:02:24		checking condition
2022-06-05/11:02:24		F1 Score Test -0.12718067053286072
2022-06-05/11:02:24		F1 Score Prod 0.3352880511655427
2022-06-05/11:02:24		r2_test < r2_prod so, Prod model is More accurate
2022-06-05/11:23:44		Entered the get_data method of the Data_Getter class
2022-06-05/11:23:44		Data Load Successful.Exited the get_data method of the Data_Getter class
2022-06-05/11:23:44		Entered the separate_label_feature method of the Preprocessor class
2022-06-05/11:23:44		Label Separation Successful. Exited the separate_label_feature method of the Preprocessor class
2022-06-05/11:23:47		Testing objects loaded {'0': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=3, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=5, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=None, oob_score=False,
                      random_state=None, verbose=0, warm_start=False), 'KMeans': KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300,
       n_clusters=4, n_init=10, n_jobs=None, precompute_distances='auto',
       random_state=42, tol=0.0001, verbose=0), '1': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=nan, n_estimators=50,
             n_jobs=1, nthread=None, objective='reg:linear', random_state=0,
             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,
             silent=None, subsample=1, verbosity=1), '2': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=nan, n_estimators=200,
             n_jobs=1, nthread=None, objective='reg:linear', random_state=0,
             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,
             silent=None, subsample=1, verbosity=1), 'StandardScaler': StandardScaler(copy=True, with_mean=True, with_std=True), '3': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=nan, n_estimators=100,
             n_jobs=1, nthread=None, objective='reg:linear', random_state=0,
             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,
             silent=None, subsample=1, verbosity=1)}
2022-06-05/11:23:47		Entered the separate_label_feature method of the Preprocessor class
2022-06-05/11:23:47		Label Separation Successful. Exited the separate_label_feature method of the Preprocessor class
2022-06-05/11:23:58		Production objects loaded {'0': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=None, oob_score=False,
                      random_state=None, verbose=0, warm_start=False), 'KMeans': KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300,
       n_clusters=3, n_init=10, n_jobs=None, precompute_distances='auto',
       random_state=42, tol=0.0001, verbose=0), '1': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=None, oob_score=False,
                      random_state=None, verbose=0, warm_start=False), '2': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=nan, n_estimators=100,
             n_jobs=1, nthread=None, objective='reg:linear', random_state=0,
             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,
             silent=None, subsample=1, verbosity=1), 'StandardScaler': StandardScaler(copy=True, with_mean=True, with_std=True)}
2022-06-05/11:23:58		checking condition
2022-06-05/11:23:58		F1 Score Test -0.11919138886004513
2022-06-05/11:23:58		F1 Score Prod 0.3352880511655427
2022-06-05/11:23:58		r2_test < r2_prod so, Prod model is More accurate
2022-06-05/12:09:20		Entered the get_data method of the Data_Getter class
2022-06-05/12:09:20		Data Load Successful.Exited the get_data method of the Data_Getter class
2022-06-05/12:09:20		Entered the separate_label_feature method of the Preprocessor class
2022-06-05/12:09:20		Label Separation Successful. Exited the separate_label_feature method of the Preprocessor class
2022-06-05/12:24:18		Entered the get_data method of the Data_Getter class
2022-06-05/12:24:18		Data Load Successful.Exited the get_data method of the Data_Getter class
2022-06-05/12:24:18		Entered the separate_label_feature method of the Preprocessor class
2022-06-05/12:24:18		Label Separation Successful. Exited the separate_label_feature method of the Preprocessor class
2022-06-05/12:26:39		Entered the get_data method of the Data_Getter class
2022-06-05/12:26:39		Data Load Successful.Exited the get_data method of the Data_Getter class
2022-06-05/12:26:39		Entered the separate_label_feature method of the Preprocessor class
2022-06-05/12:26:39		Label Separation Successful. Exited the separate_label_feature method of the Preprocessor class
2022-06-05/12:27:46		Entered the get_data method of the Data_Getter class
2022-06-05/12:27:46		Data Load Successful.Exited the get_data method of the Data_Getter class
2022-06-05/12:27:46		Entered the separate_label_feature method of the Preprocessor class
2022-06-05/12:27:46		Label Separation Successful. Exited the separate_label_feature method of the Preprocessor class
2022-06-05/13:15:04		Entered the get_data method of the Data_Getter class
2022-06-05/13:15:04		Data Load Successful.Exited the get_data method of the Data_Getter class
2022-06-05/13:15:04		Entered the separate_label_feature method of the Preprocessor class
2022-06-05/13:15:04		Label Separation Successful. Exited the separate_label_feature method of the Preprocessor class
2022-06-05/13:15:08		Testing objects loaded {'0': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=None, oob_score=False,
                      random_state=None, verbose=0, warm_start=False), 'KMeans': KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300,
       n_clusters=4, n_init=10, n_jobs=None, precompute_distances='auto',
       random_state=42, tol=0.0001, verbose=0), '1': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=nan, n_estimators=100,
             n_jobs=1, nthread=None, objective='reg:linear', random_state=0,
             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,
             silent=None, subsample=1, verbosity=1), '2': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=nan, n_estimators=100,
             n_jobs=1, nthread=None, objective='reg:linear', random_state=0,
             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,
             silent=None, subsample=1, verbosity=1), 'StandardScaler': StandardScaler(copy=True, with_mean=True, with_std=True), '3': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=nan, n_estimators=100,
             n_jobs=1, nthread=None, objective='reg:linear', random_state=0,
             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,
             silent=None, subsample=1, verbosity=1)}
2022-06-05/13:15:08		Entered the separate_label_feature method of the Preprocessor class
2022-06-05/13:15:08		Label Separation Successful. Exited the separate_label_feature method of the Preprocessor class
2022-06-05/13:15:22		Production objects loaded {'0': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=None, oob_score=False,
                      random_state=None, verbose=0, warm_start=False), 'KMeans': KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300,
       n_clusters=3, n_init=10, n_jobs=None, precompute_distances='auto',
       random_state=42, tol=0.0001, verbose=0), '1': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=None, oob_score=False,
                      random_state=None, verbose=0, warm_start=False), '2': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=nan, n_estimators=100,
             n_jobs=1, nthread=None, objective='reg:linear', random_state=0,
             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,
             silent=None, subsample=1, verbosity=1), 'StandardScaler': StandardScaler(copy=True, with_mean=True, with_std=True)}
2022-06-05/13:15:22		checking condition
2022-06-05/13:15:22		F1 Score Test -0.051608648499039705
2022-06-05/13:15:22		F1 Score Prod 0.3352880511655427
2022-06-05/13:15:22		r2_test < r2_prod so, Prod model is More accurate
2022-06-05/13:21:11		Entered the get_data method of the Data_Getter class
2022-06-05/13:21:11		Data Load Successful.Exited the get_data method of the Data_Getter class
2022-06-05/13:21:11		Entered the separate_label_feature method of the Preprocessor class
2022-06-05/13:21:11		Label Separation Successful. Exited the separate_label_feature method of the Preprocessor class
2022-06-05/13:22:48		Testing objects loaded {'0': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=None, oob_score=False,
                      random_state=None, verbose=0, warm_start=False), 'KMeans': KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300,
       n_clusters=4, n_init=10, n_jobs=None, precompute_distances='auto',
       random_state=42, tol=0.0001, verbose=0), '1': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=nan, n_estimators=100,
             n_jobs=1, nthread=None, objective='reg:linear', random_state=0,
             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,
             silent=None, subsample=1, verbosity=1), '2': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=nan, n_estimators=100,
             n_jobs=1, nthread=None, objective='reg:linear', random_state=0,
             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,
             silent=None, subsample=1, verbosity=1), 'StandardScaler': StandardScaler(copy=True, with_mean=True, with_std=True), '3': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=nan, n_estimators=100,
             n_jobs=1, nthread=None, objective='reg:linear', random_state=0,
             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,
             silent=None, subsample=1, verbosity=1)}
2022-06-05/13:22:51		Entered the separate_label_feature method of the Preprocessor class
2022-06-05/13:22:51		Label Separation Successful. Exited the separate_label_feature method of the Preprocessor class
2022-06-05/13:23:34		Production objects loaded {'0': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=None, oob_score=False,
                      random_state=None, verbose=0, warm_start=False), 'KMeans': KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300,
       n_clusters=3, n_init=10, n_jobs=None, precompute_distances='auto',
       random_state=42, tol=0.0001, verbose=0), '1': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=None, oob_score=False,
                      random_state=None, verbose=0, warm_start=False), '2': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=nan, n_estimators=100,
             n_jobs=1, nthread=None, objective='reg:linear', random_state=0,
             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,
             silent=None, subsample=1, verbosity=1), 'StandardScaler': StandardScaler(copy=True, with_mean=True, with_std=True)}
2022-06-05/13:23:36		checking condition
2022-06-05/13:23:37		F1 Score Test -0.051608648499039705
2022-06-05/13:23:38		F1 Score Prod 0.3352880511655427
2022-06-05/13:23:40		r2_test < r2_prod so, Prod model is More accurate
2022-06-05/13:39:25		Entered the get_data method of the Data_Getter class
2022-06-05/13:39:25		Data Load Successful.Exited the get_data method of the Data_Getter class
2022-06-05/13:39:25		Entered the separate_label_feature method of the Preprocessor class
2022-06-05/13:39:25		Label Separation Successful. Exited the separate_label_feature method of the Preprocessor class
2022-06-05/13:39:32		Testing objects loaded {'KMeans': KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300,
       n_clusters=4, n_init=10, n_jobs=None, precompute_distances='auto',
       random_state=42, tol=0.0001, verbose=0), 'StandardScaler': StandardScaler(copy=True, with_mean=True, with_std=True), 'full_model': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=None, oob_score=False,
                      random_state=None, verbose=0, warm_start=False)}
2022-06-05/13:39:32		Entered the separate_label_feature method of the Preprocessor class
2022-06-05/13:39:32		Label Separation Successful. Exited the separate_label_feature method of the Preprocessor class
2022-06-05/13:39:49		Production objects loaded {'0': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=None, oob_score=False,
                      random_state=None, verbose=0, warm_start=False), 'KMeans': KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300,
       n_clusters=3, n_init=10, n_jobs=None, precompute_distances='auto',
       random_state=42, tol=0.0001, verbose=0), '1': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=None, oob_score=False,
                      random_state=None, verbose=0, warm_start=False), '2': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=nan, n_estimators=100,
             n_jobs=1, nthread=None, objective='reg:linear', random_state=0,
             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,
             silent=None, subsample=1, verbosity=1), 'StandardScaler': StandardScaler(copy=True, with_mean=True, with_std=True)}
2022-06-05/13:39:49		checking condition
2022-06-05/13:39:49		F1 Score Test 0.6760017001623239
2022-06-05/13:39:49		F1 Score Prod 0.3352880511655427
2022-06-05/13:39:49		r2_test > r2_prod so moving to prod
2022-06-05/13:42:32		Entered the get_data method of the Data_Getter class
2022-06-05/13:42:32		Data Load Successful.Exited the get_data method of the Data_Getter class
2022-06-05/13:42:32		Entered the separate_label_feature method of the Preprocessor class
2022-06-05/13:42:32		Label Separation Successful. Exited the separate_label_feature method of the Preprocessor class
2022-06-05/13:42:52		Testing objects loaded {'KMeans': KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300,
       n_clusters=4, n_init=10, n_jobs=None, precompute_distances='auto',
       random_state=42, tol=0.0001, verbose=0), 'StandardScaler': StandardScaler(copy=True, with_mean=True, with_std=True), 'full_model': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=None, oob_score=False,
                      random_state=None, verbose=0, warm_start=False)}
2022-06-05/13:42:52		Entered the separate_label_feature method of the Preprocessor class
2022-06-05/13:42:52		Label Separation Successful. Exited the separate_label_feature method of the Preprocessor class
2022-06-05/13:43:01		Production objects loaded {'KMeans': KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300,
       n_clusters=4, n_init=10, n_jobs=None, precompute_distances='auto',
       random_state=42, tol=0.0001, verbose=0), 'StandardScaler': StandardScaler(copy=True, with_mean=True, with_std=True), 'full_model': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=None, oob_score=False,
                      random_state=None, verbose=0, warm_start=False)}
2022-06-05/13:43:01		checking condition
2022-06-05/13:43:01		F1 Score Test 0.6760017001623239
2022-06-05/13:43:01		F1 Score Prod 0.6760017001623239
2022-06-05/13:43:01		r2_test < r2_prod so, Prod model is More accurate
2022-06-05/14:18:14		Entered the get_data method of the Data_Getter class
2022-06-05/14:18:14		Data Load Successful.Exited the get_data method of the Data_Getter class
2022-06-05/14:18:14		Entered the separate_label_feature method of the Preprocessor class
2022-06-05/14:18:14		Label Separation Successful. Exited the separate_label_feature method of the Preprocessor class
2022-06-05/14:18:17		Testing objects loaded {'KMeans': KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300,
       n_clusters=4, n_init=10, n_jobs=None, precompute_distances='auto',
       random_state=42, tol=0.0001, verbose=0), 'StandardScaler': StandardScaler(copy=True, with_mean=True, with_std=True), 'full_model': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=nan, n_estimators=200,
             n_jobs=1, nthread=None, objective='reg:linear', random_state=0,
             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,
             silent=None, subsample=1, verbosity=1), '3': XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=1, gamma=0,
             importance_type='gain', learning_rate=0.1, max_delta_step=0,
             max_depth=3, min_child_weight=1, missing=nan, n_estimators=100,
             n_jobs=1, nthread=None, objective='reg:linear', random_state=0,
             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,
             silent=None, subsample=1, verbosity=1), '1': DecisionTreeRegressor(ccp_alpha=0.0, criterion='mse', max_depth=14,
                      max_features='auto', max_leaf_nodes=None,
                      min_impurity_decrease=0.0, min_impurity_split=None,
                      min_samples_leaf=1, min_samples_split=10,
                      min_weight_fraction_leaf=0.0, presort='deprecated',
                      random_state=None, splitter='random')}
2022-06-05/14:18:17		Entered the separate_label_feature method of the Preprocessor class
2022-06-05/14:18:17		Label Separation Successful. Exited the separate_label_feature method of the Preprocessor class
2022-06-05/14:18:23		Production objects loaded {'KMeans': KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300,
       n_clusters=4, n_init=10, n_jobs=None, precompute_distances='auto',
       random_state=42, tol=0.0001, verbose=0), 'StandardScaler': StandardScaler(copy=True, with_mean=True, with_std=True), 'full_model': RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',
                      max_depth=None, max_features='auto', max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_impurity_split=None, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      n_estimators=100, n_jobs=None, oob_score=False,
                      random_state=None, verbose=0, warm_start=False)}
2022-06-05/14:18:23		checking condition
2022-06-05/14:18:23		F1 Score Test 0.6491857802075798
2022-06-05/14:18:23		F1 Score Prod 0.6760017001623239
2022-06-05/14:18:23		r2_test < r2_prod so, Prod model is More accurate
